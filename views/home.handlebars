<div class="container my-4">
  <!-- Título principal -->
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="text-primary">
      <i class="fas fa-home"></i> Página Principal
    </h1>
    <div class="btn-group" role="group">
      <!-- Botón para productos en tiempo real -->
      <a href="/realtimeproducts" class="btn btn-outline-success">
        <i class="fas fa-sync-alt"></i> Productos en tiempo real
      </a>
      <!-- Botón para el chat -->
      <a href="/chat" class="btn btn-outline-info">
        <i class="fas fa-comments"></i> Chat
      </a>
      <!-- Botón para el carrito -->
      <a href="#" class="btn btn-outline-warning" onclick="redirectToCart()">
        <i class="fas fa-shopping-cart"></i> Carrito
      </a>
    </div>
  </div>

  <!-- Filtros y ordenamiento -->
  <form id="filter-form" class="mb-4">
    <div class="row g-3">
      <div class="col-md-4">
        <select id="category" class="form-select">
          <option value="">Todas las categorías</option>
          <option value="Videojuego">Videojuegos</option>
          <option value="Consola">Consolas</option>
          <option value="Accesorio">Accesorios</option>
        </select>
      </div>
      <div class="col-md-4">
        <select id="status" class="form-select">
          <option value="">Todos los estados</option>
          <option value="true">Activos</option>
          <option value="false">Inactivos</option>
        </select>
      </div>
      <div class="col-md-4">
        <select id="sort" class="form-select">
          <option value="">Sin orden</option>
          <option value="asc">Precio ascendente</option>
          <option value="desc">Precio descendente</option>
        </select>
      </div>
    </div>
    <div class="mt-3">
      <button type="button" class="btn btn-primary w-100" onclick="applyFilters()">Aplicar filtros</button>
    </div>
  </form>

  <!-- Productos -->
  <div class="row row-cols-1 row-cols-md-3 g-4">
    {{#each products}}
    <div class="col">
      <div class="card h-100 shadow-sm">
        {{#if this.thumbnail}}
        <img 
          src="{{this.thumbnail}}" 
          alt="{{this.title}}" 
          class="card-img-top" 
          onerror="this.onerror=null;this.src='../public/img/no-image.jpeg';" 
        />
        {{else}}
        <img 
          src="../public/img/no-image.jpeg" 
          alt="Sin imagen" 
          class="card-img-top" 
        />
        {{/if}}
        <div class="card-body">
          <h5 class="card-title">{{this.title}}</h5>
          <p class="card-text">{{this.description}}</p>
          <ul class="list-group list-group-flush mb-2">
            <li class="list-group-item"><b>Precio:</b> ${{this.price}}</li>
            <li class="list-group-item"><b>Categoría:</b> {{this.category}}</li>
          </ul>
          <a href="/products/{{this._id}}" class="btn btn-outline-primary btn-sm w-100 mb-2">
            Ver detalles
          </a>
          <button class="btn btn-primary btn-sm w-100" onclick="addToCart('{{this._id}}')">
            Agregar al carrito
          </button>
        </div>
      </div>
    </div>
    {{/each}}
  </div>

  <!-- Paginación -->
  <div class="d-flex justify-content-between align-items-center mt-4">
    {{#if pagination.hasPrevPage}}
    <a href="{{pagination.prevLink}}" class="btn btn-outline-secondary">Anterior</a>
    {{/if}}
    <span>Página {{pagination.page}} de {{pagination.totalPages}}</span>
    {{#if pagination.hasNextPage}}
    <a href="{{pagination.nextLink}}" class="btn btn-outline-secondary">Siguiente</a>
    {{/if}}
  </div>
</div>

<script>
  async function addToCart(productId) {
    let cartId = localStorage.getItem('cartId');

    // Si no hay un carrito en localStorage, crear uno nuevo
    if (!cartId) {
      const response = await fetch('/api/carts', { method: 'POST' });
      const data = await response.json();
      if (data.status === 'success') {
        cartId = data.payload._id; // Asegúrate de usar el _id del carrito creado
        localStorage.setItem('cartId', cartId);
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'No se pudo crear el carrito',
        });
        return;
      }
    }

    // Agregar el producto al carrito
    try {
      const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ quantity: 1 }),
      });

      if (response.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Producto agregado',
          text: 'El producto se agregó al carrito exitosamente',
        });
      } else {
        const error = await response.json();
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message,
        });
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'No se pudo agregar el producto al carrito',
      });
    }
  }

  function redirectToCart() {
    const cartId = localStorage.getItem('cartId');
    if (cartId) {
      window.location.href = `/carts/${cartId}`;
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'No se encontró un carrito válido',
      });
    }
  }

  function applyFilters() {
    const category = document.getElementById('category').value;
    const status = document.getElementById('status').value;
    const sort = document.getElementById('sort').value;

    let query = '/?';
    if (category) query += `category=${category}&`;
    if (status) query += `status=${status}&`;
    if (sort) query += `sort=${sort}&`;

    window.location.href = query.slice(0, -1); // Redirigir con los filtros aplicados
  }
</script>